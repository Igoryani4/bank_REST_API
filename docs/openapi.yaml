openapi: 3.0.3
info:
  title: Bank Cards Management API
  description: |
    REST API для управления банковскими картами с аутентификацией JWT.
    
    ## Возможности:
    - **Администратор**: управление всеми картами и пользователями
    - **Пользователь**: просмотр своих карт, переводы между своими картами
    - **Безопасность**: шифрование данных, ролевой доступ
    
    ## Роли:
    - **ADMIN**: полный доступ ко всем операциям
    - **USER**: доступ только к своим данным

  version: 1.0.0
  contact:
    name: Bank API Support
    email: support@bank.com

servers:
  - url: http://localhost:8080/api
    description: Development server

tags:
  - name: Authentication
    description: Аутентификация и авторизация
  - name: Cards
    description: Управление банковскими картами
  - name: Transactions
    description: Операции перевода между картами
  - name: Admin
    description: Административные операции

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Вход в систему
      description: Аутентификация пользователя и получение JWT токена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
        '400':
          description: Ошибка валидации

  /auth/register:
    post:
      tags: [Authentication]
      summary: Регистрация нового пользователя
      description: Создание нового пользователя (только для ADMIN)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Пользователь успешно создан
        '400':
          description: Ошибка валидации
        '403':
          description: Доступ запрещен

  /cards/my-cards:
    get:
      tags: [Cards]
      summary: Получить свои карты с пагинацией
      description: Возвращает список карт текущего пользователя с возможностью фильтрации по статусу
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Номер страницы (начинается с 0)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Размер страницы
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [ACTIVE, BLOCKED, EXPIRED]
          description: Фильтр по статусу карты
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: createdAt
          description: Поле для сортировки
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Направление сортировки
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPage'
        '401':
          description: Не авторизован
        '403':
          description: Доступ запрещен

  /cards/admin/all-cards:
    get:
      tags: [Admin, Cards]
      summary: Получить все карты (ADMIN)
      description: Возвращает все карты в системе с фильтрацией (только для ADMIN)
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [ACTIVE, BLOCKED, EXPIRED]
        - name: userId
          in: query
          required: false
          schema:
            type: integer
          description: Фильтр по ID пользователя
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPage'
        '403':
          description: Требуются права ADMIN

  /cards:
    post:
      tags: [Cards]
      summary: Создать новую карту (ADMIN)
      description: Создание новой банковской карты (только для ADMIN)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        '200':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '403':
          description: Требуются права ADMIN

  /cards/{id}/block:
    post:
      tags: [Cards]
      summary: Заблокировать карту
      description: Пользователь может заблокировать свою карту
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Карта успешно заблокирована
        '403':
          description: Нет доступа к карте
        '404':
          description: Карта не найдена

  /transactions/transfer:
    post:
      tags: [Transactions]
      summary: Перевод между своими картами
      description: Перевод средств между картами, принадлежащими текущему пользователю
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Перевод выполнен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDto'
        '400':
          description: Ошибка валидации перевода
        '403':
          description: Нет доступа к картам

components:
  schemas:
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          example: "user123"
        password:
          type: string
          example: "password123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT токен
        type:
          type: string
          example: "Bearer"
        username:
          type: string
        roles:
          type: array
          items:
            type: string

    RegisterRequest:
      type: object
      required: [username, password, email]
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string

    CardDto:
      type: object
      properties:
        id:
          type: integer
        maskedCardNumber:
          type: string
          example: "**** **** **** 1234"
        expiryDate:
          type: string
          format: date
          example: "2026-12-31"
        cardHolderName:
          type: string
        type:
          type: string
          enum: [DEBIT, CREDIT]
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
        dailyLimit:
          type: number
          format: double
        balance:
          type: number
          format: double
        accountNumber:
          type: string

    CardPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDto'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer

    TransferRequest:
      type: object
      required: [fromAccountNumber, toAccountNumber, amount]
      properties:
        fromAccountNumber:
          type: string
          description: Номер счета отправителя
        toAccountNumber:
          type: string
          description: Номер счета получателя
        amount:
          type: number
          format: double
          minimum: 0.01
          description: Сумма перевода
        description:
          type: string
          description: Описание перевода

    TransactionDto:
      type: object
      properties:
        id:
          type: integer
        transactionId:
          type: string
          description: Уникальный идентификатор транзакции
        amount:
          type: number
          format: double
        currency:
          type: string
          example: "RUB"
        type:
          type: string
          enum: [TRANSFER, PAYMENT, DEPOSIT]
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
        description:
          type: string
        fromAccountNumber:
          type: string
        toAccountNumber:
          type: string
        createdAt:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []